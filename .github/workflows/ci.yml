name: build-and-release

permissions:
  contents: write

on:
  push:
    branches: [ main, master ]
    paths:
      - 'src/**'
      - 'examples/**'
      - '.github/workflows/ci.yml'
      - 'CMakeLists.txt'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'src/**'
      - 'examples/**'
      - '.github/workflows/ci.yml'
      - 'CMakeLists.txt'
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential
    
    - name: Build interpreter
      run: |
        mkdir build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
        cmake --build . --config Release
    
    - name: Find gov executable
      run: |
        cd build
        ls -la bin/
        if [ ! -f "bin/gov" ]; then
          echo "gov executable not found!"
          exit 1
        fi
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gov-linux-folder
        path: build/bin/gov
        retention-days: 30

  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Build interpreter
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
        cmake --build . --config Release
    - name: Find gov.exe
      id: find_gov_exe
      shell: pwsh
      run: |
        $govPath = Get-ChildItem -Path "build/bin" -Recurse -Filter "gov.exe" | Select-Object -First 1
        if ($null -eq $govPath) {
          Write-Host "gov.exe not found!"
          exit 1
        }
        echo "gov_exe_path=$($govPath.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gov-windows-folder
        path: ${{ env.gov_exe_path }}
        retention-days: 30
        if-no-files-found: warn

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Build interpreter
      run: |
        mkdir build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
        cmake --build . --config Release
    
    - name: Find gov executable
      run: |
        cd build
        ls -la bin/
        if [ ! -f "bin/gov" ]; then
          echo "gov executable not found!"
          exit 1
        fi
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gov-macos-folder
        path: build/bin/gov
        retention-days: 30

  release:
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set version
      id: version
      run: echo "VERSION=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT

    - name: Delete existing tag if it exists
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Check if tag exists on remote and delete it
        if git ls-remote --tags origin | grep -q "refs/tags/${{ steps.version.outputs.VERSION }}$"; then
          echo "Tag ${{ steps.version.outputs.VERSION }} exists on remote, deleting..."
          git push origin :refs/tags/${{ steps.version.outputs.VERSION }} || true
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create tag
      run: |
        git tag ${{ steps.version.outputs.VERSION }}
        git push origin ${{ steps.version.outputs.VERSION }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Delete existing release if it exists
      run: |
        gh release delete ${{ steps.version.outputs.VERSION }} --yes || true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        release_name: Release ${{ steps.version.outputs.VERSION }}
        draft: false
        prerelease: false
        body: |
          ## Gov Language Interpreter ${{ steps.version.outputs.VERSION }}
          
          ### Downloads
          Choose the appropriate version for your operating system:
          
          - **Windows**: `gov-windows.exe`
          - **Linux**: `gov-linux`
          - **macOS**: `gov-macos`
          
          ### Installation
          1. Download the appropriate executable for your system
          2. Make it executable (Linux/macOS): `chmod +x gov-*`
          3. Run the executable directly (no installation required)
          4. Use `--help` to see available commands
    - name: Upload Release Assets
      run: |
        echo "Listing artifacts..."
        ls -la
        
        echo "Checking each artifact directory..."
        for dir in gov-*folder; do
          echo "=== $dir ==="
          ls -la "$dir/" 2>/dev/null || echo "Directory $dir not found or empty"
        done
        
        # Create renamed copies of files
        echo "Creating renamed copies..."
        
        # Copy and rename Windows executable
        if [ -f "gov-windows-folder/gov.exe" ]; then
          cp "gov-windows-folder/gov.exe" "gov-windows.exe"
          echo "Created gov-windows.exe"
        fi
        
        # Copy and rename Linux executable
        if [ -f "gov-linux-folder/gov" ]; then
          cp "gov-linux-folder/gov" "gov-linux"
          chmod +x "gov-linux"
          echo "Created gov-linux"
        fi
        
        # Copy and rename macOS executable
        if [ -f "gov-macos-folder/gov" ]; then
          cp "gov-macos-folder/gov" "gov-macos"
          chmod +x "gov-macos"
          echo "Created gov-macos"
        fi
        
        echo "Final files to upload:"
        ls -la gov-windows.exe gov-linux gov-macos 2>/dev/null || echo "Some files missing"
        
        # Upload files with proper names
        if [ -f "gov-windows.exe" ]; then
          echo "Uploading Windows executable..."
          gh release upload ${{ steps.version.outputs.VERSION }} "gov-windows.exe" --clobber
        else
          echo "Windows executable not found!"
        fi
        
        if [ -f "gov-linux" ]; then
          echo "Uploading Linux executable..."
          gh release upload ${{ steps.version.outputs.VERSION }} "gov-linux" --clobber
        else
          echo "Linux executable not found!"
        fi
        
        if [ -f "gov-macos" ]; then
          echo "Uploading macOS executable..."
          gh release upload ${{ steps.version.outputs.VERSION }} "gov-macos" --clobber
        else
          echo "macOS executable not found!"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}